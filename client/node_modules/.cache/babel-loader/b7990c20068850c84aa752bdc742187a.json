{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drake Nguyen\\\\project\\\\test\\\\client\\\\src\\\\Chat\\\\Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport socketClient from \"socket.io-client\";\nimport ChannelList from \"./ChannelList\";\nimport MessagesPanel from \"./MessagesPanel\";\nimport \"./chat.css\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport default function Chat() {\n  let socket = socketClient(SERVER);\n  socket.on(\"connection\", value => {\n    console.log(\"I am connected to server\");\n  });\n  socket.on(\"channel\", channel => {\n    let channelList = channels;\n    channelList.forEach(c => {\n      if (c.id === channel.id) {\n        c.participants = channel.participants;\n      }\n    });\n    setChannels(channelList);\n  });\n  const [channels, setChannels] = useState([{\n    id: 1,\n    name: \"first\",\n    participants: 10\n  }]);\n  const [id, setId] = useState(0);\n\n  const loadChannel = async () => {\n    console.log(\"load channel running!\");\n    fetch(\"http://localhost:8080/getChannels\").then(async response => {\n      let data = await response.json();\n      setChannels(data.channels);\n    });\n  };\n\n  const handleChannelSelect = id => {\n    setId(id);\n    socket.emit(\"channel-join\", id, ack => {});\n  };\n\n  useEffect(() => {\n    if (channels.length < 2) loadChannel();\n    console.log(channels);\n  }, [channels]); // useEffect(() => {}, [channels]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChannelList, {\n    channels: channels,\n    onSelectChannel: handleChannelSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MessagesPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Drake Nguyen/project/test/client/src/Chat/Chat.js"],"names":["React","useState","useEffect","socketClient","ChannelList","MessagesPanel","SERVER","Chat","socket","on","value","console","log","channel","channelList","channels","forEach","c","id","participants","setChannels","name","setId","loadChannel","fetch","then","response","data","json","handleChannelSelect","emit","ack","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,YAAP;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAEA,eAAe,SAASC,IAAT,GAAgB;AAC7B,MAAIC,MAAM,GAAGL,YAAY,CAACG,MAAD,CAAzB;AACAE,EAAAA,MAAM,CAACC,EAAP,CAAU,YAAV,EAAyBC,KAAD,IAAW;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACD,GAFD;AAIAJ,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBI,OAAD,IAAa;AAChC,QAAIC,WAAW,GAAGC,QAAlB;AACAD,IAAAA,WAAW,CAACE,OAAZ,CAAqBC,CAAD,IAAO;AACzB,UAAIA,CAAC,CAACC,EAAF,KAASL,OAAO,CAACK,EAArB,EAAyB;AACvBD,QAAAA,CAAC,CAACE,YAAF,GAAiBN,OAAO,CAACM,YAAzB;AACD;AACF,KAJD;AAKAC,IAAAA,WAAW,CAACN,WAAD,CAAX;AACD,GARD;AAUA,QAAM,CAACC,QAAD,EAAWK,WAAX,IAA0BnB,QAAQ,CAAC,CACvC;AACEiB,IAAAA,EAAE,EAAE,CADN;AAEEG,IAAAA,IAAI,EAAE,OAFR;AAGEF,IAAAA,YAAY,EAAE;AAHhB,GADuC,CAAD,CAAxC;AAOA,QAAM,CAACD,EAAD,EAAKI,KAAL,IAAcrB,QAAQ,CAAC,CAAD,CAA5B;;AAEA,QAAMsB,WAAW,GAAG,YAAY;AAC9BZ,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAY,IAAAA,KAAK,CAAC,mCAAD,CAAL,CAA2CC,IAA3C,CAAgD,MAAOC,QAAP,IAAoB;AAClE,UAAIC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAjB;AACAR,MAAAA,WAAW,CAACO,IAAI,CAACZ,QAAN,CAAX;AACD,KAHD;AAID,GAND;;AAQA,QAAMc,mBAAmB,GAAIX,EAAD,IAAQ;AAClCI,IAAAA,KAAK,CAACJ,EAAD,CAAL;AACAV,IAAAA,MAAM,CAACsB,IAAP,CAAY,cAAZ,EAA4BZ,EAA5B,EAAiCa,GAAD,IAAS,CAAE,CAA3C;AACD,GAHD;;AAKA7B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,QAAQ,CAACiB,MAAT,GAAkB,CAAtB,EAAyBT,WAAW;AACpCZ,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAZ;AACD,GAHQ,EAGN,CAACA,QAAD,CAHM,CAAT,CAtC6B,CA2C7B;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEA,QAAvB;AAAiC,IAAA,eAAe,EAAEc,mBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketClient from \"socket.io-client\";\r\nimport ChannelList from \"./ChannelList\";\r\nimport MessagesPanel from \"./MessagesPanel\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\n\r\nexport default function Chat() {\r\n  let socket = socketClient(SERVER);\r\n  socket.on(\"connection\", (value) => {\r\n    console.log(\"I am connected to server\");\r\n  });\r\n\r\n  socket.on(\"channel\", (channel) => {\r\n    let channelList = channels;\r\n    channelList.forEach((c) => {\r\n      if (c.id === channel.id) {\r\n        c.participants = channel.participants;\r\n      }\r\n    });\r\n    setChannels(channelList);\r\n  });\r\n\r\n  const [channels, setChannels] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"first\",\r\n      participants: 10,\r\n    },\r\n  ]);\r\n  const [id, setId] = useState(0);\r\n\r\n  const loadChannel = async () => {\r\n    console.log(\"load channel running!\");\r\n    fetch(\"http://localhost:8080/getChannels\").then(async (response) => {\r\n      let data = await response.json();\r\n      setChannels(data.channels);\r\n    });\r\n  };\r\n\r\n  const handleChannelSelect = (id) => {\r\n    setId(id);\r\n    socket.emit(\"channel-join\", id, (ack) => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (channels.length < 2) loadChannel();\r\n    console.log(channels);\r\n  }, [channels]);\r\n\r\n  // useEffect(() => {}, [channels]);\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <ChannelList channels={channels} onSelectChannel={handleChannelSelect} />\r\n      <MessagesPanel />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}