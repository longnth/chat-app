{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Drake Nguyen\\\\project\\\\test\\\\client\\\\src\\\\Chat\\\\Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport socketClient from \"socket.io-client\";\nimport ChannelList from \"./ChannelList\";\nimport MessagesPanel from \"./MessagesPanel\";\nimport \"./chat.css\";\nconst SERVER = \"http://127.0.0.1:8080\";\nexport default function Chat() {\n  // let socket = socketClient(SERVER);\n  // socket.on(\"connection\", (value) => {\n  //   console.log(\"I am connected to server\");\n  // });\n  // // socket.on(\"channel\", (channel) => {\n  // //   let channelList = channels;\n  // //   channelList.forEach((c) => {\n  // //     if (c.id === channel.id) {\n  // //       c.participants = channel.participants;\n  // //     }\n  // //   });\n  // //   setChannels(channelList);\n  // // });\n  // const [channels, setChannels] = useState([\n  //   {\n  //     id: 1,\n  //     name: \"first\",\n  //     participants: 10,\n  //   },\n  // ]);\n  // const [id, setId] = useState(0);\n  // const loadChannel = async () => {\n  //   console.log(\"load channel running!\");\n  //   fetch(\"http://localhost:8080/getChannels\").then(async (response) => {\n  //     let data = await response.json();\n  //     setChannels(data.channels);\n  //   });\n  // };\n  // const handleChannelSelect = (id) => {\n  //   setId(id);\n  //   socket.emit(\"channel-join\", id, (ack) => {});\n  // };\n  // useEffect(() => {\n  //   loadChannel();\n  // }, []);\n  // useEffect(() => {\n  //   socket.on(\"channel\", (channel) => {\n  //     let channelList = channels;\n  //     channelList.forEach((c) => {\n  //       if (c.id === channel.id) {\n  //         c.participants = channel.participants;\n  //       }\n  //     });\n  //     setChannels(channelList);\n  //   });\n  // }, [channels, socket]);\n  // const [channels, setChannels] = useState(null);\n  // const [socket, setSocket] = useState(null);\n  // const [channel, setChannel] = useState(null);\n  const [state, setState] = useState({\n    channels: null,\n    socket: null,\n    channel: null\n  });\n  useEffect(() => {\n    loadChannels();\n    configureSocket();\n  });\n\n  const loadChannels = async () => {\n    console.log(\"load channel running!\");\n    fetch(\"http://localhost:8080/getChannels\").then(async response => {\n      let data = await response.json();\n      setState(data.channels);\n    });\n  };\n\n  const configureSocket = () => {\n    var socket = socketClient(SERVER);\n    socket.on(\"connection\", () => {\n      if (state.channel) {\n        handleChannelSelect(state.channel.id);\n      }\n    });\n    socket.on(\"channel\", channel => {\n      let channels = state.channels;\n      channels.forEach(c => {\n        if (c.id === channel.id) {\n          c.participants = channel.participants;\n        }\n      }); // setChannels(channels);\n\n      setState({\n        channels\n      });\n    });\n    socket.on(\"message\", message => {\n      let channels = channels;\n      channels.forEach(c => {\n        if (c.id === message.channel_id) {\n          if (!c.messages) c.messages = [message];else c.message.push(message);\n        }\n      });\n    });\n    setState(socket);\n  };\n\n  const handleChannelSelect = id => {\n    let channel = state.channels.find(c => {\n      return c.id === id;\n    });\n    setState({\n      channel\n    });\n    state.socket.emit(\"channel-join\", id, ack => {});\n  };\n\n  const handleSendMessage = (channel_id, text) => {\n    state.socket.emit(\"send-message\", {\n      channel_id,\n      text,\n      senderName: state.socket.id,\n      id: Date.now()\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ChannelList, {\n    channels: state.channels,\n    onSelectChannel: handleChannelSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(MessagesPanel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/Drake Nguyen/project/test/client/src/Chat/Chat.js"],"names":["React","useState","useEffect","socketClient","ChannelList","MessagesPanel","SERVER","Chat","state","setState","channels","socket","channel","loadChannels","configureSocket","console","log","fetch","then","response","data","json","on","handleChannelSelect","id","forEach","c","participants","message","channel_id","messages","push","find","emit","ack","handleSendMessage","text","senderName","Date","now"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport socketClient from \"socket.io-client\";\r\nimport ChannelList from \"./ChannelList\";\r\nimport MessagesPanel from \"./MessagesPanel\";\r\n\r\nimport \"./chat.css\";\r\n\r\nconst SERVER = \"http://127.0.0.1:8080\";\r\n\r\nexport default function Chat() {\r\n  // let socket = socketClient(SERVER);\r\n  // socket.on(\"connection\", (value) => {\r\n  //   console.log(\"I am connected to server\");\r\n  // });\r\n\r\n  // // socket.on(\"channel\", (channel) => {\r\n  // //   let channelList = channels;\r\n  // //   channelList.forEach((c) => {\r\n  // //     if (c.id === channel.id) {\r\n  // //       c.participants = channel.participants;\r\n  // //     }\r\n  // //   });\r\n  // //   setChannels(channelList);\r\n  // // });\r\n\r\n  // const [channels, setChannels] = useState([\r\n  //   {\r\n  //     id: 1,\r\n  //     name: \"first\",\r\n  //     participants: 10,\r\n  //   },\r\n  // ]);\r\n  // const [id, setId] = useState(0);\r\n\r\n  // const loadChannel = async () => {\r\n  //   console.log(\"load channel running!\");\r\n  //   fetch(\"http://localhost:8080/getChannels\").then(async (response) => {\r\n  //     let data = await response.json();\r\n  //     setChannels(data.channels);\r\n  //   });\r\n  // };\r\n\r\n  // const handleChannelSelect = (id) => {\r\n  //   setId(id);\r\n  //   socket.emit(\"channel-join\", id, (ack) => {});\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   loadChannel();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   socket.on(\"channel\", (channel) => {\r\n  //     let channelList = channels;\r\n  //     channelList.forEach((c) => {\r\n  //       if (c.id === channel.id) {\r\n  //         c.participants = channel.participants;\r\n  //       }\r\n  //     });\r\n  //     setChannels(channelList);\r\n  //   });\r\n  // }, [channels, socket]);\r\n\r\n  // const [channels, setChannels] = useState(null);\r\n  // const [socket, setSocket] = useState(null);\r\n  // const [channel, setChannel] = useState(null);\r\n  const [state, setState] = useState({\r\n    channels: null,\r\n    socket: null,\r\n    channel: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadChannels();\r\n    configureSocket();\r\n  });\r\n\r\n  const loadChannels = async () => {\r\n    console.log(\"load channel running!\");\r\n    fetch(\"http://localhost:8080/getChannels\").then(async (response) => {\r\n      let data = await response.json();\r\n      setState(data.channels);\r\n    });\r\n  };\r\n\r\n  const configureSocket = () => {\r\n    var socket = socketClient(SERVER);\r\n    socket.on(\"connection\", () => {\r\n      if (state.channel) {\r\n        handleChannelSelect(state.channel.id);\r\n      }\r\n    });\r\n\r\n    socket.on(\"channel\", (channel) => {\r\n      let channels = state.channels;\r\n      channels.forEach((c) => {\r\n        if (c.id === channel.id) {\r\n          c.participants = channel.participants;\r\n        }\r\n      });\r\n      // setChannels(channels);\r\n      setState({ channels });\r\n    });\r\n\r\n    socket.on(\"message\", (message) => {\r\n      let channels = channels;\r\n      channels.forEach((c) => {\r\n        if (c.id === message.channel_id) {\r\n          if (!c.messages) c.messages = [message];\r\n          else c.message.push(message);\r\n        }\r\n      });\r\n    });\r\n\r\n    setState(socket);\r\n  };\r\n\r\n  const handleChannelSelect = (id) => {\r\n    let channel = state.channels.find((c) => {\r\n      return c.id === id;\r\n    });\r\n    setState({ channel });\r\n    state.socket.emit(\"channel-join\", id, (ack) => {});\r\n  };\r\n\r\n  const handleSendMessage = (channel_id, text) => {\r\n    state.socket.emit(\"send-message\", {\r\n      channel_id,\r\n      text,\r\n      senderName: state.socket.id,\r\n      id: Date.now(),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-app\">\r\n      <ChannelList\r\n        channels={state.channels}\r\n        onSelectChannel={handleChannelSelect}\r\n      />\r\n      <MessagesPanel />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}